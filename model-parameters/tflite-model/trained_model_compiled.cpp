/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 26.06.2021 12:28:00

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 5520;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,2600 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0036305147223174572, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 272, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { 1794, 397, -1800, -6063, 499, 2518, 1758, 265, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 3.2383155485149473e-05, 1.8496732081985101e-05, 1.7128122635767795e-05, 1.6648304153932258e-05, 1.2093501936760731e-05, 1.3456173292070162e-05, 1.1616476513154339e-05, 1.3634923561767209e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { -3283, 1324, -4848, 1452, -2016, 1262, -2320, 174, 1239, 278, -1592, 247, 2534, -434, 1160, -1020, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 9.2205351393204182e-05, 6.3973508076742291e-05, 5.5575164878973737e-05, 7.8551536716986448e-05, 6.8030276452191174e-05, 5.6059470807667822e-05, 7.5310352258384228e-05, 5.4005486163077876e-05, 7.2935647040139884e-05, 5.0179194658994675e-05, 0.00010150517482543364, 4.6146829845383763e-05, 5.2281196985859424e-05, 7.0824717113282531e-05, 4.6058754378464073e-05, 7.4697141826618463e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 407, 2687, -3192, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 9.3839378678239882e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[3*272] = { 
  -11, -112, -28, 1, 72, -105, -33, 54, -59, -57, 90, -31, -36, 29, -65, 3, 10, 6, -54, -37, 81, -66, 19, 43, -12, -13, 127, -46, -56, 23, -121, 64, 27, 10, 23, -49, 86, -11, 49, -7, -18, -64, 109, -42, -55, 7, -48, 79, -6, -52, 15, -22, 71, -32, 19, -38, -41, -26, 69, -18, -55, 11, -4, 65, 60, -30, 26, -9, 59, -55, -62, 14, -41, -46, 81, -49, -49, 15, -56, 76, 72, -33, 44, -39, 78, -47, -86, 14, 7, -24, 99, 7, -3, 59, -19, 31, 6, -37, 38, 31, 29, -78, -59, 15, 4, -38, 20, -20, -30, 75, -71, 63, 21, -102, -31, 0, 33, -68, -53, 80, -27, -39, 51, -59, -16, 66, -43, 31, 77, -93, -27, -13, 35, -103, -80, 41, -7, -40, 104, -30, 9, 48, -46, 62, 36, -89, -66, -14, -15, -101, -124, 3, -3, -31, 25, -38, -53, 14, -68, 38, 21, -59, -51, -41, -1, -75, -8, -9, -22, -27, 43, -13, -15, 48, -16, 40, 59, -100, -16, -41, 28, -81, -58, -12, -23, -37, 58, -59, -1, 36, -15, 35, 48, -58, -35, -38, 1, -64, -83, 71, -23, -31, 103, -54, -39, 39, -96, 77, 26, -64, -41, -5, 8, -82, -68, 16, -12, 10, 101, -37, -7, 1, -18, 79, 41, -80, 0, -4, 44, -53, -73, 23, -8, -23, 76, 28, 16, 51, -36, 64, 101, -26, 65, -40, 32, -20, -41, -2, -6, 26, 93, -26, -29, 76, -38, 98, 20, 8, 70, -26, 82, 24, -18, 54, 89, -20, 111, 100, 22, -4, 86, 76, 
  -23, 33, 81, 88, 29, 47, -12, 96, 96, 56, -38, 45, 93, -77, 40, 81, -84, 46, 3, 49, -4, 25, 1, 0, 29, 15, -92, 39, 46, -97, 21, -18, -38, 32, -3, 24, -18, 29, 45, -16, -8, 19, -80, 23, 3, -64, -12, -19, -11, -23, -54, 21, -83, -8, -39, -3, 18, 17, -67, -30, 30, -93, 25, -10, -35, 51, -47, -21, -52, 18, -3, -14, -30, -4, -33, -6, 39, -47, -13, -29, -34, 4, -42, -10, -52, -2, 36, 11, 8, 4, -86, -18, 14, -64, -4, -5, -24, 19, -4, 0, -58, 19, -49, -13, 12, 8, -91, -3, 42, -111, 0, 39, -78, 32, -16, 16, -27, 35, -30, -12, -22, 23, -47, 29, -2, -84, 6, -29, -70, -6, -40, 0, -28, 40, -69, -8, 26, -8, -65, -16, 7, -72, -10, -28, -78, -7, -18, -13, -9, 13, -24, -5, 14, -16, -57, 15, 12, -45, -29, 6, -62, 6, 5, 12, -65, 3, -46, -24, 23, 8, -38, -8, 26, -104, 17, -16, -76, -23, -56, 19, 8, 14, -25, -16, -7, 5, -61, -8, -10, -95, -36, -16, -51, 6, -44, -15, -22, -24, -18, -15, -32, -10, -41, 0, -3, -100, 27, -38, -68, 22, 18, 9, -68, 10, -17, 30, -5, -23, -9, -38, 7, -107, 26, -12, 7, -10, -17, 15, -56, 17, -30, 52, 18, 7, -31, 34, -1, -104, 22, 3, -38, 26, -15, 62, -10, 36, -28, 19, 22, 72, -4, 24, 47, -41, 37, 15, 58, 82, 0, 84, 47, 51, -53, 56, 66, 44, -9, 38, 33, -81, -7, 43, 
  7, -21, -48, -95, -17, -19, 18, -116, -63, -52, -64, -55, -79, 51, -37, -108, 14, 9, 34, -32, 14, -12, -40, -34, -57, 11, -64, -4, -2, 71, 19, -26, 13, -3, 42, -16, -11, 4, -86, 23, -8, -3, 3, 2, -31, 22, 15, 3, -9, 15, 35, 2, 5, -2, 38, 4, -11, 29, -19, -11, -15, 39, -13, -29, 27, 22, 31, 20, 37, 41, 28, 11, 23, 24, -4, 5, 9, 0, -6, -2, -11, 30, 32, 6, 32, 8, 9, 14, -7, 1, 31, 24, 13, 15, 54, -25, 2, 19, 27, -10, 51, 38, 93, 24, 11, 23, 6, 36, 8, 60, 4, -15, 3, 29, -13, -9, 21, 21, 64, -1, -11, 24, -8, 23, 22, 24, 28, -25, 0, 19, 53, -3, 6, 32, 60, 17, 3, 28, 9, 8, 22, -5, -6, -18, 1, 29, 25, 18, 26, 29, 93, 31, 43, 43, 8, 39, 6, 33, 37, 10, 10, 47, 44, -5, 5, 31, 71, 2, 8, 13, 12, 32, 37, 44, 47, -13, 47, 6, 50, -7, -5, 28, 9, 3, 4, 29, -15, 12, 15, 45, 21, -6, 48, 27, 16, 1, -1, 25, 83, 2, 12, 15, -38, 27, 13, 43, 22, -28, 43, 21, 20, 7, 20, 9, 76, -53, -8, -7, -45, 19, -17, 62, -21, -61, -31, 16, 12, 8, 37, -13, 63, -1, -43, -31, -24, 11, -29, 39, -28, -47, 0, 3, -10, -38, 21, 6, 27, -58, -39, -77, -56, -46, -43, 1, -30, -61, -67, -58, 11, -40, -119, -1, 70, -67, -38, -29, -38, -27, -20, 71, -59, -68, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,272 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0046840761788189411, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -62,13,-11,1,4,-25,-7,-2,-17,-57,-48,0,29,51,-93,-92,-44,-42,-50,-9,-49,-51,-25,-29,-30,-19,19,33,44,-12,-41,0,-32,17,12,-2,17,1,-31,-103, -59,-5,7,12,21,9,31,-4,5,-19,5,5,15,4,-59,-28,-39,-68,-48,-5,-80,-90,-18,-51,-38,-32,30,43,54,17,-23,33,18,26,-2,0,36,19,-73,-127, -29,3,11,35,42,37,44,34,42,42,43,30,51,41,-34,-16,-34,-11,-40,-19,-48,-48,-26,-48,-9,13,20,41,38,29,-26,21,26,32,-6,7,51,11,-46,-108, 
  /* [1][0][][] */ 33,-13,-29,-39,-7,16,16,-25,-10,54,36,-28,1,0,-10,33,-29,-17,-21,-60,-75,-37,-86,-65,-24,-41,-56,-19,-53,37,-25,-74,-26,-56,-54,-46,-30,-42,4,52, 45,10,2,-1,-35,55,68,15,63,71,37,53,-21,-22,42,-22,1,41,-23,16,26,35,33,39,18,1,-40,-23,10,53,24,31,50,26,-3,59,-14,25,71,127, 15,-21,-13,32,15,-19,47,17,47,35,3,-7,1,0,-6,21,-38,-47,-34,-76,-40,-54,-84,-19,-27,-33,-32,-63,8,-6,-30,-25,11,-24,-25,-16,-3,-13,21,70, 
  /* [2][0][][] */ -22,46,51,29,-52,-62,-55,20,-18,6,26,116,89,45,-49,-95,-57,-8,18,74,25,47,33,22,1,-10,-7,-61,-37,-34,-36,40,55,14,18,47,50,8,-28,-98, -32,43,53,-13,-53,-23,-62,-84,-31,-21,33,47,101,28,3,-73,-27,-32,0,52,38,27,22,1,8,-17,-54,-14,-19,-42,-19,32,16,14,7,-22,72,39,-43,-93, -61,49,124,-24,8,-86,-11,-30,-62,-30,22,53,80,54,-37,-87,-102,-22,6,32,84,19,28,-25,-46,-34,0,-55,-58,-80,-34,15,36,10,8,31,38,-17,6,-127, 
  /* [3][0][][] */ -20,75,26,15,15,-36,38,70,-4,5,2,-2,-15,39,97,53,84,82,7,24,7,39,44,-4,51,13,9,11,-15,19,-21,-35,-40,-39,-28,-20,-44,11,-34,-48, -8,36,40,-52,13,34,80,58,-5,31,-43,20,-30,-6,68,122,88,127,42,4,-10,28,30,-15,7,21,1,14,22,8,-5,-80,-79,3,-21,-27,-59,-75,-6,-62, 15,-14,59,-69,-21,-29,45,28,2,-38,-13,28,0,26,93,47,88,89,52,64,-20,-30,-52,-43,-18,-6,-49,25,-50,-43,-96,-104,-88,-20,-14,-7,-86,-66,-36,-16, 
  /* [4][0][][] */ 100,5,-60,28,56,7,36,33,-24,55,64,40,27,20,49,-22,21,-44,6,-22,29,26,32,6,62,47,5,31,110,-20,21,-47,40,-63,-118,-122,-7,13,-24,127, 71,10,-40,1,40,50,-52,-33,27,4,22,-59,-65,-33,-45,12,66,-48,-45,60,10,-26,-28,94,43,80,-34,83,77,54,102,48,-12,-44,5,-49,-11,-102,48,112, 23,-103,-31,18,32,0,-49,-22,17,12,30,-64,-7,-17,-16,-18,-62,-17,-4,-32,8,-39,5,-50,69,-26,9,102,83,-46,-65,-41,-30,-80,-75,-34,-30,-32,25,124, 
  /* [5][0][][] */ 122,-22,-15,-28,-35,5,-29,-34,25,-43,3,-8,34,-19,7,39,47,61,-4,34,3,4,8,18,22,-12,71,32,41,59,81,34,-34,-23,-39,29,-30,-48,-12,67, -2,-86,-100,5,-52,25,-15,-6,-63,21,-49,-80,-68,-46,39,11,17,-17,59,-44,-50,-64,-47,-13,-15,6,17,60,3,80,61,41,7,10,20,17,-67,33,44,111, 46,-41,-66,-51,1,-15,26,35,30,-92,-47,0,-16,17,20,65,18,-47,43,-38,-41,-55,-29,-23,29,38,13,55,60,57,-17,-47,-55,-76,29,-63,-54,-27,7,127, 
  /* [6][0][][] */ -19,-71,-95,-69,-30,-105,8,-28,-78,33,-46,49,36,-22,48,22,8,-52,73,5,5,69,6,15,-36,-91,-79,-32,41,-82,-89,-76,-40,49,-29,7,29,-33,-60,-6, 100,-31,-12,44,-5,13,-17,-51,22,25,47,110,65,49,-28,107,-88,-3,-10,119,78,110,85,39,-44,-11,-78,-58,62,-23,9,-14,-3,-25,11,5,43,61,-60,-39, 36,22,2,-4,4,-71,57,27,38,96,70,117,71,51,44,72,-127,-68,21,24,64,57,4,-40,-68,-61,22,-39,65,-36,12,9,52,89,79,14,70,-6,7,-12, 
  /* [7][0][][] */ 127,-7,11,33,28,58,63,102,46,88,19,30,39,61,43,45,-21,10,11,-74,19,-31,-11,37,59,44,-43,14,112,121,27,13,46,-45,-26,-42,39,-51,58,116, 89,21,14,18,-63,75,95,94,97,54,45,44,-23,-26,81,-26,3,-6,-43,-112,-56,-62,-16,-54,37,34,28,26,97,97,66,11,21,19,-84,-101,-96,5,52,74, 26,-46,-43,-33,15,100,73,79,-46,16,-44,-50,-65,-6,-8,27,-43,-37,-92,-107,-84,-48,-117,-63,-75,-27,-21,54,-51,30,-57,-55,-77,-81,-75,-62,-107,-104,-20,108, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0089197149500250816, 0.0050947959534823895, 0.0047178221866488457, 0.004585659597069025, 0.0033310709986835718, 0.0037064091302454472, 0.0031996776815503836, 0.0037556446623057127, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ 104,14,-34,7,-23,-21,25,-49, 127,14,-36,-20,-11,-10,6,-6, 125,-1,42,48,2,42,32,-19, 
  /* [1][0][][] */ -15,127,-60,-20,12,41,27,99, -23,48,-69,59,-12,46,-1,10, -1,61,-67,102,24,-3,-38,10, 
  /* [2][0][][] */ 35,48,-71,-127,42,20,-103,-56, 36,20,-73,98,35,-32,-78,60, 0,-64,-27,-6,40,34,63,36, 
  /* [3][0][][] */ -127,9,-31,-54,-29,4,-24,35, -106,9,-18,-7,25,5,68,-24, -114,-43,-1,-48,-12,-5,13,-9, 
  /* [4][0][][] */ 20,-30,127,98,35,-26,11,58, -56,-17,49,92,-24,-47,13,62, 119,-115,61,92,-67,7,-47,-24, 
  /* [5][0][][] */ -23,43,-77,35,45,102,8,127, -18,7,-64,66,22,95,-27,-30, -15,46,-52,45,37,69,-15,75, 
  /* [6][0][][] */ 23,-32,29,127,-5,12,-17,122, 3,8,10,-43,-23,22,-58,-4, 20,-17,-32,-80,-32,-41,-86,-56, 
  /* [7][0][][] */ 5,-3,127,-64,-2,15,91,-23, -62,-16,72,-62,71,51,119,-65, -83,-48,31,-61,26,-49,-37,-12, 
  /* [8][0][][] */ -127,-8,5,-47,-36,-53,-6,19, -63,41,-37,12,47,5,60,67, -44,-73,-13,-66,5,-39,20,28, 
  /* [9][0][][] */ -62,8,-71,-29,48,2,-113,-22, -36,127,-57,-15,-6,39,104,-31, -68,18,-41,100,38,-21,41,48, 
  /* [10][0][][] */ 32,-29,127,-34,-35,-74,2,-59, 112,-18,68,-17,12,-41,42,-91, 91,-32,66,-55,-22,-52,44,-80, 
  /* [11][0][][] */ -37,6,-85,83,41,37,20,5, -28,76,-78,-16,-47,63,18,127, -18,-7,-112,125,40,-89,23,-32, 
  /* [12][0][][] */ -125,66,-88,-21,7,32,3,-61, -94,36,13,-40,13,-101,83,62, -127,62,-86,-92,-28,15,-25,54, 
  /* [13][0][][] */ 107,24,-44,90,-96,-48,-29,-90, 111,-9,15,0,4,-9,-40,-67, 127,-9,-12,88,-11,4,74,-48, 
  /* [14][0][][] */ -124,56,-28,25,-81,47,-20,-79, -101,88,-42,37,127,31,36,7, -98,73,5,-77,-39,99,32,-37, 
  /* [15][0][][] */ 85,35,81,-15,-43,-69,-56,-42, -13,-53,64,-34,33,-14,80,7, 76,-38,127,-82,-8,-22,-23,-12, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0064723305404186249, 0.0044906036928296089, 0.0039010841865092516, 0.0055139046162366867, 0.0047753676772117615, 0.0039350800216197968, 0.0052863904275000095, 0.0037909010425209999, 0.0051196985878050327, 0.0035223155282437801, 0.0071251289919018745, 0.0032392647117376328, 0.0036698649637401104, 0.0049715223722159863, 0.0032330821268260479, 0.0052433465607464314, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 65, 40, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 65, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 33, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 33, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,65,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0036305147223174572, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,65,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.014246081933379173, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,65,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.014246081933379173, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,33,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.014246081933379173, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,33,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.014246081933379173, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,33,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0200337003916502, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,33,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0200337003916502, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,17,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0200337003916502, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,272 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0200337003916502, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.13998663425445557, } };
const TfArray<1, int> quant21_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2608, (TfLiteIntArray*)&tensor_dimension0, 2600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 816, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2608, (TfLiteIntArray*)&tensor_dimension13, 520, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 520, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 528, (TfLiteIntArray*)&tensor_dimension15, 264, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 264, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 528, (TfLiteIntArray*)&tensor_dimension17, 528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 528, (TfLiteIntArray*)&tensor_dimension19, 272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 272, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
