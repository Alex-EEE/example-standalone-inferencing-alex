/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

#ifndef _EI_CLASSIFIER_MODEL_METADATA_H_
#define _EI_CLASSIFIER_MODEL_METADATA_H_

#include <stdint.h>
#include "model_types.h"
#include "tflite-model/trained_model_compiled.h"
#include "edge-impulse-sdk/classifier/ei_run_dsp.h"

const char* impulse_1_categories[] = { "idle", "snake", "updown", "wave" };

ei_dsp_config_spectral_analysis_t impulse_1_dsp_config_458 = {
    1,
    3,
    1.00000f,
    "low",
    3.00000f,
    6,
    128,
    3,
    0.10000f,
    "0.1, 0.5, 1.0, 2.0, 5.0"
};

const size_t impulse_1_dsp_blocks_size = 1;
ei_model_dsp_t impulse_1_dsp_blocks[impulse_1_dsp_blocks_size] = {
    { // DSP block 458
        33,
        &extract_spectral_analysis_features,
        (void*)&impulse_1_dsp_config_458
    }
};

const size_t impulse_1_dsp_blocks_i16_size = 1;
ei_model_dsp_i16_t impulse_1_dsp_blocks_i16[impulse_1_dsp_blocks_i16_size] = {
    { // DSP block 458
        33,
        &extract_spectral_analysis_features,
        (void*)&impulse_1_dsp_config_458
    }
};

ei_impulse_t impulse_1 = {
    1,
    "EdgeImpulse Inc.",
    "Continuous gestures",
    295,
    33,
    123,
    3,
    (3 * 123),
    0,
    0,
    16,
    4,
    0,
    62.5,
    false,
    false,
    3673,
    EI_CLASSIFIER_DATATYPE_INT8,
    1,
    0.11557556688785553,
    -128,
    EI_CLASSIFIER_DATATYPE_INT8,
    1,
    0.00390625,
    -128,
    EI_CLASSIFIER_TFLITE,
    true,
    true,
    (123 / 4),
    4,
    true,
    impulse_1_categories,
    &trained_model_1_input,
    &trained_model_1_output,
    &trained_model_1_init,
    &trained_model_1_invoke,
    &trained_model_1_reset,
    impulse_1_dsp_blocks_size,
    impulse_1_dsp_blocks,
    impulse_1_dsp_blocks_i16_size,
    impulse_1_dsp_blocks_i16
};

#define EI_CLASSIFIER_INFERENCING_ENGINE         EI_CLASSIFIER_TFLITE
#define EI_CLASSIFIER_COMPILED                   1
#define EI_CLASSIFIER_HAS_TFLITE_OPS_RESOLVER    1

#if EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE && EI_CLASSIFIER_USE_FULL_TFLITE == 1
#undef EI_CLASSIFIER_INFERENCING_ENGINE
#undef EI_CLASSIFIER_HAS_TFLITE_OPS_RESOLVER
#define EI_CLASSIFIER_INFERENCING_ENGINE          EI_CLASSIFIER_TFLITE_FULL
#define EI_CLASSIFIER_HAS_TFLITE_OPS_RESOLVER     0
#if EI_CLASSIFIER_COMPILED == 1
#error "Cannot use full TensorFlow Lite with EON"
#endif
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE && EI_CLASSIFIER_USE_FULL_TFLITE == 1

#endif // _EI_CLASSIFIER_MODEL_METADATA_H_
