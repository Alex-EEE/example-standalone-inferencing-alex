/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 01.04.2021 08:51:21

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 5520;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) float tensor_data2[8] = { -1.2011865377426147, -1.872165322303772, -0.70715516805648804, -0.35605201125144958, -1.8278588056564331, -1.7035889625549316, 0.000987063511274755, -1.4340910911560059, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const ALIGN(8) float tensor_data3[16] = { 1.0785965919494629, 0.24092164635658264, -0.90397888422012329, -0.509521484375, -0.3872283399105072, -1.0600290298461914, -1.3713687658309937, -0.87069588899612427, 0.24140509963035583, 0.16552439332008362, -0.13456261157989502, -1.1368083953857422, 0.35925602912902832, 0.14412665367126465, -0.1467013955116272, -0.46923065185546875, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const ALIGN(8) float tensor_data4[5] = { -0.9054257869720459, -0.34443262219429016, 0.61566901206970215, -0.024157086387276649, 0.025072529911994934, };
const TfArray<1, int> tensor_dimension4 = { 1, { 5 } };
const ALIGN(8) float tensor_data5[5*208] = { 
  -0.47634756565093994, -0.26173672080039978, -0.73253434896469116, 0.14221833646297455, 0.34232422709465027, -0.60350888967514038, 0.70872259140014648, -1.1228522062301636, 0.32489016652107239, -0.047624614089727402, -0.25117290019989014, 0.43255513906478882, -0.98890173435211182, -0.8850475549697876, -0.7613183856010437, -0.77519714832305908, -0.19948126375675201, -0.45409747958183289, -1.1947530508041382, 0.034867677837610245, 0.24849741160869598, -0.92100304365158081, 0.66449159383773804, -1.00838303565979, 0.1260654479265213, 0.60857874155044556, -0.40165024995803833, 0.12771840393543243, -0.43562072515487671, -1.3199343681335449, 0.30537298321723938, -0.6905742883682251, -0.13504496216773987, -0.39335301518440247, -0.89849311113357544, -0.10407818108797073, 0.11484827846288681, -0.83646535873413086, 0.55200028419494629, -0.36699238419532776, 0.33266177773475647, 0.52314996719360352, -0.17627930641174316, 0.21346785128116608, -0.70014935731887817, -0.088473506271839142, 0.54998809099197388, -0.76814007759094238, -0.11777520179748535, -0.36920678615570068, -0.99086487293243408, -0.15934215486049652, 0.14152839779853821, -0.81098240613937378, 0.49970638751983643, -0.56933170557022095, 0.21164634823799133, 0.39319518208503723, 0.0051261754706501961, 0.32667884230613708, 0.32768726348876953, -1.6854574680328369, 0.42256727814674377, -0.58468484878540039, -0.044574510306119919, -0.5189669132232666, -0.47860383987426758, -0.077269278466701508, 0.059646580368280411, -0.86328315734863281, 0.38589110970497131, -0.79289591312408447, 0.052382875233888626, 0.28300571441650391, 0.082665257155895233, 0.54024422168731689, 0.37837749719619751, -0.46988236904144287, 0.39931610226631165, -0.61280244588851929, -0.26222959160804749, -0.15005236864089966, -0.31754523515701294, -0.44476661086082458, 0.13137881457805634, -0.46889546513557434, 0.22242413461208344, -0.6098058819770813, 0.17375081777572632, 0.1032184362411499, -0.0722079798579216, 0.61811411380767822, 0.37107408046722412, 0.33136895298957825, 0.27199122309684753, -0.97818458080291748, -0.52987712621688843, 0.19051653146743774, -0.38810700178146362, -1.2292684316635132, -0.017297612503170967, -0.33801758289337158, 0.36789456009864807, -0.15432025492191315, 0.18329086899757385, 0.13321882486343384, -0.2517130970954895, 0.52575564384460449, 0.28275275230407715, 0.29278230667114258, 0.25307348370552063, -0.9050937294960022, -0.60923278331756592, 0.20381729304790497, -0.32444888353347778, -0.71920830011367798, 0.17686840891838074, -0.059478331357240677, 0.25751665234565735, -0.20726865530014038, -0.014257370494306087, 0.14973108470439911, -0.31168404221534729, -0.62794274091720581, 0.31230548024177551, 0.18261145055294037, 0.12597222626209259, -0.31053107976913452, -0.2313673347234726, 0.18047799170017242, -0.36631157994270325, -0.59310179948806763, 0.089137636125087738, -0.099058277904987335, 0.16652750968933105, -0.22073258459568024, 0.30817139148712158, 0.40887275338172913, -0.2918890118598938, -0.40488937497138977, 0.177719846367836, 0.42070895433425903, 0.11565046012401581, -0.46875143051147461, -0.57598620653152466, 0.39981278777122498, -0.29887497425079346, -0.29097118973731995, 0.29017776250839233, 0.076825447380542755, 0.029320709407329559, -0.26338812708854675, 0.15041710436344147, -0.19702360033988953, -0.4166114330291748, 0.2215295135974884, 0.12969079613685608, 0.2891744077205658, 0.11561302095651627, 0.12329795211553574, -0.23989592492580414, 0.28011426329612732, -0.17350856959819794, -0.27650624513626099, 0.20525248348712921, 0.19242468476295471, -0.57961279153823853, -0.12458781152963638, 0.016482161357998848, -1.2294936180114746, -0.38581869006156921, 0.46164730191230774, -0.043636433780193329, 0.24099321663379669, -0.87388819456100464, 0.070473194122314453, -0.2298552393913269, 0.054671522229909897, -0.12566924095153809, -0.048285540193319321, 0.18525679409503937, 0.25422751903533936, -1.0851306915283203, 0.0092750489711761475, 0.35792645812034607, -0.95004510879516602, -0.51121664047241211, 0.297954261302948, 0.26810246706008911, 0.19350530207157135, -1.4661878347396851, 0.044858362525701523, -0.195775106549263, -0.11954455822706223, -0.51274949312210083, 0.073976807296276093, 0.18380522727966309, 0.88406950235366821, -0.49204659461975098, 0.11159120500087738, 0.22526293992996216, -1.3944958448410034, -0.87180161476135254, 0.49529635906219482, -0.094859130680561066, 0.32731148600578308, -0.98294943571090698, 0.091862194240093231, 
  -0.50780808925628662, 0.92375952005386353, -0.72480988502502441, 0.057714592665433884, 0.34805777668952942, 0.27868527173995972, -1.1135653257369995, 0.058900140225887299, -0.17993499338626862, -0.82018142938613892, -0.37657430768013, 0.5332944393157959, -0.10944027453660965, 0.14434456825256348, -1.0447292327880859, -0.58052718639373779, -0.82377594709396362, 0.67876219749450684, -0.3790682852268219, -0.1199687123298645, 0.3023257851600647, 0.68539375066757202, -0.4549311101436615, 0.078039400279521942, -0.23021893203258514, -0.81260985136032104, -0.71470373868942261, 0.37828895449638367, 0.40553191304206848, 0.32077282667160034, -0.6841614842414856, -0.18965280055999756, -0.52013415098190308, 0.61041224002838135, -0.337149977684021, -0.1643386036157608, 0.078486695885658264, 0.15817931294441223, -0.4775034487247467, 0.029356276616454124, -0.26976245641708374, -0.57765048742294312, -0.44375428557395935, 0.33026912808418274, 0.3001607358455658, 0.41643103957176208, -0.92358088493347168, -0.094914928078651428, -0.46342551708221436, 0.32987746596336365, -0.53200334310531616, -0.41069939732551575, 0.022062545642256737, 0.290363609790802, -0.23003454506397247, 0.13584116101264954, -0.42495360970497131, -0.29219898581504822, -0.38311219215393066, 0.23368275165557861, 0.45890668034553528, 0.67213022708892822, -0.53253161907196045, 0.035812996327877045, -0.49019172787666321, 0.27237141132354736, -0.37305241823196411, -0.48659619688987732, 0.15021824836730957, 0.29003599286079407, -0.15444013476371765, 0.02608441561460495, -0.24197158217430115, -0.51198750734329224, -0.37377852201461792, 0.32674020528793335, 0.035119310021400452, 0.49416244029998779, -0.28384062647819519, -0.1458408534526825, -0.78258448839187622, 0.32213550806045532, -0.051192224025726318, -0.45536863803863525, 0.13784338533878326, 0.074510037899017334, -0.26016303896903992, 0.051778584718704224, -0.082712069153785706, 0.39792490005493164, 0.051572475582361221, -0.088243447244167328, 0.012952640652656555, 0.27362120151519775, -0.52005064487457275, 0.16702979803085327, -0.88616949319839478, 0.25931477546691895, -0.18321710824966431, -0.49186363816261292, 0.24237893521785736, 0.24595081806182861, 0.052606776356697083, 0.13570499420166016, -0.24308457970619202, 0.43197959661483765, -0.39083260297775269, -0.45764487981796265, 0.10511834919452667, 0.15987959504127502, -0.27014836668968201, 0.1810615211725235, -0.77667695283889771, 0.19047103822231293, 0.17457447946071625, -0.26196295022964478, -0.079917557537555695, -0.032706841826438904, 0.10665327310562134, 0.15272596478462219, -0.58669734001159668, 0.26367178559303284, -0.14034038782119751, -0.62676620483398438, 0.2117951363325119, 0.27907305955886841, 0.054476093500852585, 0.045387689024209976, -0.87038910388946533, 0.065226688981056213, 0.17937564849853516, -0.32516205310821533, -0.059354908764362335, 0.15528680384159088, 0.10152138769626617, 0.027006376534700394, -0.66247051954269409, 0.33188650012016296, -0.30908006429672241, 0.070045247673988342, 0.093100845813751221, -0.022483080625534058, 0.053510598838329315, 0.23942989110946655, -0.57984644174575806, -0.44418278336524963, 0.24186724424362183, -0.15352943539619446, -0.10374625027179718, 0.037506174296140671, 0.19988556206226349, -0.051192641258239746, -0.66012626886367798, 0.33397850394248962, 0.041015505790710449, 0.23274627327919006, 0.012293430976569653, -0.50347471237182617, 0.30071982741355896, 0.026711609214544296, -0.54286879301071167, -0.096422404050827026, 0.12902477383613586, 0.072981551289558411, -0.26570600271224976, 0.34251070022583008, 0.32002592086791992, -0.22932475805282593, -0.1301434338092804, 0.60681730508804321, -0.17829680442810059, 0.27745065093040466, -0.11086121946573257, -0.55081385374069214, 0.012236809358000755, -0.54209917783737183, -0.61166363954544067, -0.52349662780761719, -0.14200493693351746, 0.205693319439888, 0.043297335505485535, 0.14796073734760284, 0.4182661771774292, -0.58050388097763062, 0.16086059808731079, 0.52422434091567993, -0.11022935062646866, 0.510112464427948, -0.16528032720088959, -0.31318885087966919, 0.1572350412607193, -0.41913723945617676, -0.10688135772943497, -0.62125331163406372, 0.090190023183822632, 0.14486396312713623, 0.017576191574335098, -0.17845562100410461, 0.30712080001831055, -0.64417660236358643, -0.36699053645133972, 0.39989000558853149, -0.29625529050827026, 0.41840088367462158, -0.43316191434860229, -0.38162213563919067, 0.16278223693370819, -0.11330373585224152, 
  0.03278137743473053, -0.13201050460338593, -0.32817003130912781, 0.032450247555971146, -0.48012626171112061, 0.091264389455318451, -0.059181168675422668, 0.16398447751998901, -0.51381510496139526, 0.27296161651611328, 0.43742474913597107, -0.37736168503761292, 0.70461124181747437, 0.141341432929039, 0.13771621882915497, 0.34877842664718628, 0.078476294875144958, 0.027155464515089989, -0.24385897815227509, 0.096134483814239502, -0.31112164258956909, -0.27157941460609436, -0.092897966504096985, 0.28161248564720154, -0.37041831016540527, 0.18056213855743408, 0.24161995947360992, -0.29816201329231262, -0.00038770903483964503, -0.10991815477609634, 0.093336977064609528, 0.085417509078979492, 0.047944251447916031, -0.14415900409221649, -0.2093750387430191, -0.057921815663576126, -0.33006268739700317, -0.2377513200044632, -0.12938524782657623, 0.16521590948104858, -0.19299846887588501, 0.26012617349624634, 0.21776372194290161, -0.041732430458068848, -0.2118208259344101, -0.19412927329540253, -0.04064159095287323, 0.27321434020996094, 0.032942149788141251, 0.035030100494623184, -0.36201733350753784, 0.084240034222602844, -0.017596893012523651, -0.55208009481430054, -0.17557609081268311, 0.097850821912288666, -0.11495313048362732, -0.032918337732553482, 0.30347049236297607, 0.13332706689834595, -0.3881777822971344, 0.14669744670391083, 0.078639179468154907, 0.075878486037254333, 0.16614404320716858, 0.17681770026683807, -0.25241047143936157, 0.13250918686389923, -0.25377750396728516, -0.17578883469104767, -0.20979411900043488, 0.27194786071777344, -0.020688073709607124, 0.21525958180427551, 0.17665396630764008, -0.29293879866600037, -0.59817379713058472, -0.015822373330593109, -0.034376278519630432, 0.14409635961055756, 0.29060110449790955, 0.081919923424720764, -0.45237690210342407, 0.22739580273628235, -0.5064963698387146, -0.079799823462963104, -0.099838942289352417, 0.090530760586261749, -0.31068789958953857, 0.046584594994783401, 0.24755410850048065, 0.01651911623775959, -0.41379103064537048, -0.22939343750476837, 0.0056870621629059315, 0.27166011929512024, 0.3414747416973114, 0.002243157709017396, -0.56142723560333252, 0.57340806722640991, -0.63206160068511963, -0.27200073003768921, -0.16138891875743866, 0.15150684118270874, -0.067620463669300079, -0.054729923605918884, 0.10675311833620071, -0.10068215429782867, -0.26168125867843628, -0.38557285070419312, -0.080213405191898346, 0.15526676177978516, 0.18134663999080658, -0.078200533986091614, -0.57236236333847046, 0.37501752376556396, -0.28528085350990295, -0.28033024072647095, -0.19400840997695923, 0.19859729707241058, -0.16668719053268433, 0.011386008001863956, 0.26304423809051514, 0.07199445366859436, -0.3168359100818634, -0.24721996486186981, 0.17018610239028931, -0.02376946434378624, 0.29375037550926208, 0.12796521186828613, -0.24285043776035309, 0.27204442024230957, -0.37615162134170532, -0.43448907136917114, -0.15278403460979462, 0.095617175102233887, -0.2162521630525589, -0.20121273398399353, 0.26972967386245728, 0.11810503900051117, -0.3077513575553894, 0.10859315097332001, -0.04692971333861351, 0.16739305853843689, 0.26593190431594849, 0.15648122131824493, -0.22262699902057648, 0.08250012993812561, -0.47901579737663269, -0.22768907248973846, -0.059477996081113815, 0.12226930260658264, -0.30739125609397888, 0.10643254220485687, 0.20181098580360413, 0.13788503408432007, -0.36691361665725708, -0.22415792942047119, 0.18193036317825317, 0.10254570841789246, 0.2830314040184021, 0.25828564167022705, -0.2262587696313858, 0.18633849918842316, -0.30182138085365295, -0.18810215592384338, -0.2120017409324646, 0.081849679350852966, -0.3632965087890625, 0.096556589007377625, 0.21529944241046906, -0.37923118472099304, -0.3213522732257843, -0.35089528560638428, 0.16015467047691345, 0.30580234527587891, 0.0067113176919519901, 0.027551472187042236, -0.38688349723815918, -0.02147972397506237, -0.4106118381023407, -0.21304567158222198, -0.04047263041138649, 0.11612923443317413, -0.31661891937255859, 0.081182517111301422, 0.35456410050392151, -0.26231992244720459, 0.12269206345081329, -0.16556574404239655, 0.23841208219528198, 0.31887233257293701, 0.093409456312656403, -0.057609081268310547, -0.015376168303191662, -0.10537222772836685, -0.383160799741745, -0.17218279838562012, -0.39229357242584229, -0.0050256983377039433, -0.2474931925535202, 0.10643086582422256, 0.40691354870796204, -0.22947905957698822, 0.23407815396785736, 0.016753397881984711, 0.22150938212871552, 0.22852911055088043, 
  0.21247000992298126, -0.22139345109462738, 0.84432214498519897, 0.051954030990600586, -0.20276768505573273, 0.010612890124320984, 0.21211588382720947, 0.21650092303752899, -0.0035793380811810493, -0.12314087152481079, 0.13961094617843628, -0.13177073001861572, -0.27010062336921692, -0.064018763601779938, 0.35229977965354919, 0.18670569360256195, 0.40274697542190552, -0.12826468050479889, 0.42003658413887024, -0.022122668102383614, 0.02730974555015564, -0.12102849036455154, 0.10989601165056229, 0.11426319181919098, 0.052299462258815765, -0.17538195848464966, 0.12707394361495972, -0.20776186883449554, -0.13914558291435242, -0.27401164174079895, 0.042810272425413132, 0.0031573972664773464, 0.29335486888885498, -0.22954456508159637, 0.37309792637825012, -0.038951344788074493, -0.17740264534950256, 0.22548301517963409, 0.23648320138454437, 0.21578046679496765, 0.10570622980594635, -0.086511939764022827, 0.078328594565391541, -0.19266919791698456, 0.0082867629826068878, -0.16663676500320435, 0.050983354449272156, -0.027560930699110031, 0.33503755927085876, 0.083404034376144409, 0.5151602029800415, 0.03665710985660553, 0.11797384172677994, 0.26301509141921997, 0.3186013400554657, 0.26039010286331177, 0.17194141447544098, 0.0049172942526638508, -0.021768538281321526, -0.07803644984960556, -0.29968312382698059, -0.063301153481006622, 0.11992086470127106, -0.08014301210641861, 0.29585957527160645, 0.021385377272963524, 0.29096496105194092, -0.18506641685962677, -0.071324750781059265, 0.31487762928009033, 0.20673239231109619, 0.2146897166967392, -0.071417465806007385, -0.087747566401958466, 0.19740080833435059, -0.12361850589513779, -0.17850306630134583, -0.12195666134357452, 0.23291076719760895, -0.0046844249591231346, 0.14898166060447693, -0.017893237993121147, 0.35285481810569763, 0.085789382457733154, 0.074299126863479614, 0.16216246783733368, 0.05009905993938446, 0.13114924728870392, -0.047568388283252716, -0.10234809666872025, -0.034311242401599884, 0.025612983852624893, -0.080502972006797791, 0.0080300215631723404, 0.226692795753479, 0.068417154252529144, 0.23491540551185608, -0.061335183680057526, 0.23656857013702393, 0.036663621664047241, 0.075627215206623077, 0.2327820360660553, 0.15746119618415833, 0.29192119836807251, 0.10669688880443573, -0.10890074819326401, -0.068769633769989014, -0.079818561673164368, -0.06234128400683403, -0.13731978833675385, 0.021248588338494301, 0.070868067443370819, 0.21425603330135345, -0.18071809411048889, 0.2011103630065918, 0.028082001954317093, 0.034881286323070526, 0.013766185380518436, 0.051887329667806625, 0.19041857123374939, -0.17159998416900635, -0.0036040684208273888, -0.014408715069293976, 0.20427870750427246, -0.17711366713047028, 0.049991399049758911, 0.22444808483123779, -0.071846790611743927, 0.36178770661354065, -0.14707672595977783, 0.0040473258122801781, -0.052375655621290207, 0.077571272850036621, 0.19791781902313232, 0.2083280086517334, 0.19408276677131653, 0.08636009693145752, -0.026765739545226097, 0.075943633913993835, -0.050831768661737442, -0.063488312065601349, 0.16423831880092621, -0.0014002016978338361, -0.17028628289699554, 0.23719090223312378, -0.18993861973285675, 0.24045808613300323, -0.0062568108551204205, 0.099947720766067505, 0.1480417400598526, 0.21388038992881775, 0.14889045059680939, 0.16470101475715637, 0.046654567122459412, 0.06117379292845726, 0.0052808262407779694, -0.13249658048152924, 0.26515251398086548, 0.18721094727516174, 0.045910719782114029, 0.3589666485786438, -0.19539748132228851, 0.1481558233499527, -0.027815617620944977, -0.025153398513793945, 0.18967875838279724, 0.20005986094474792, 0.17574641108512878, 0.085246942937374115, -0.006757562980055809, 0.070426978170871735, 0.036646738648414612, -0.1216081902384758, 0.052783321589231491, 0.16885066032409668, 0.010988472960889339, 0.3485788106918335, -0.032088048756122589, 0.0031370020005851984, -0.019476963207125664, -0.13442619144916534, 0.17204412817955017, 0.22300906479358673, 0.2120211273431778, 0.076277710497379303, 0.038109231740236282, 0.09164072573184967, -0.21123647689819336, -0.34215268492698669, 0.16138172149658203, -0.083588697016239166, -0.24521063268184662, 0.29083773493766785, 0.09194616973400116, 0.091911152005195618, -0.10747520625591278, -0.15670202672481537, 0.076607681810855865, 0.36713555455207825, 0.25913724303245544, 0.018686337396502495, -0.010550807230174541, -0.14995415508747101, -0.060708180069923401, -0.39119818806648254, 0.043870091438293457, -0.059722341597080231, 0.073123611509799957, 
  -0.48815980553627014, -0.080100223422050476, -0.002669578418135643, -0.35757055878639221, 0.32157635688781738, -0.24489715695381165, -0.80150681734085083, -0.84567862749099731, 0.36041483283042908, -0.3261229395866394, -0.41855314373970032, -0.15901868045330048, 0.20015624165534973, -0.51517981290817261, -1.1372947692871094, -0.38858678936958313, -0.40501600503921509, -0.19306346774101257, 0.57507097721099854, 0.0051895193755626678, 0.20802803337574005, -0.20220586657524109, -0.32781016826629639, -0.70575833320617676, 0.10785605758428574, -0.3244379460811615, -0.32519122958183289, -0.43215551972389221, 0.20511098206043243, -0.78238022327423096, -1.0811271667480469, 0.032283570617437363, -0.45933523774147034, -0.13315168023109436, 0.56469219923019409, -0.1759350448846817, 0.10002505779266357, 0.17765581607818604, -0.8365972638130188, -0.309029221534729, 0.19014871120452881, -0.60225749015808105, -0.088863052427768707, -0.69776391983032227, 0.44895374774932861, -0.81896775960922241, -0.95078331232070923, 0.1630244255065918, -0.37381130456924438, -0.33332133293151855, 0.80432474613189697, -0.065156169235706329, 0.11977582424879074, 0.29726007580757141, -0.37230867147445679, -0.24915196001529694, 0.32158222794532776, -0.88438898324966431, -0.23537452518939972, -0.33014285564422607, 0.42803171277046204, -0.53822344541549683, -0.39680233597755432, 0.26411813497543335, -0.35515168309211731, -0.03908795490860939, 0.61087125539779663, 0.13460952043533325, 0.15728685259819031, 0.31028878688812256, -0.82621794939041138, -0.58801484107971191, 0.15784452855587006, -0.52453690767288208, -0.24641498923301697, -0.45206597447395325, 0.46817240118980408, -1.4610332250595093, -0.79063165187835693, 0.19202861189842224, -0.37974143028259277, 0.0092634093016386032, 0.48763644695281982, 0.059343811124563217, 0.31187835335731506, -0.11040303111076355, -0.78376835584640503, -0.82987827062606812, 0.53962624073028564, -0.70346146821975708, 0.047844938933849335, 0.063278943300247192, 0.44632220268249512, -1.1474648714065552, -1.3098537921905518, 0.27929753065109253, -0.63737058639526367, 0.011878936551511288, 0.33186894655227661, 0.34549450874328613, 0.31164062023162842, 0.10284806042909622, -0.16018442809581757, -0.59490907192230225, 0.51324969530105591, -0.98923373222351074, 0.072730608284473419, 0.14727255702018738, 0.52082931995391846, -1.247769832611084, -0.91085821390151978, 0.29143983125686646, -0.23796653747558594, -0.17884416878223419, 0.50745159387588501, -0.071366593241691589, 0.34227222204208374, -7.1719579864293337e-05, -0.6897045373916626, -0.695168137550354, 0.6091572642326355, -0.62036412954330444, -0.19710738956928253, -0.009074886329472065, 0.48401877284049988, -1.393071174621582, -1.0845624208450317, -0.042167007923126221, -0.0039778342470526695, 0.0013580229133367538, 0.43489381670951843, -0.19313707947731018, 0.13917513191699982, 0.19566723704338074, -0.99913543462753296, -0.55360525846481323, 0.59268128871917725, -0.53654086589813232, 0.15904442965984344, -0.044616702944040298, 0.21364018321037292, -0.98298877477645874, -0.76544928550720215, 0.1872541755437851, -0.26224178075790405, -0.22032548487186432, 0.26599472761154175, 0.10589352995157242, 0.13348263502120972, 0.1493622362613678, -0.74160623550415039, -0.64812242984771729, 0.40568077564239502, -0.63196057081222534, 0.060330100357532501, -0.44724783301353455, 0.58128130435943604, -0.086812466382980347, -0.79710549116134644, 0.24025508761405945, -0.20656502246856689, -0.1213628426194191, 0.28642162680625916, -0.24084760248661041, 0.46342191100120544, 0.09133872389793396, -0.93182146549224854, -0.62306994199752808, 0.14723609387874603, -0.67438763380050659, -0.078894995152950287, -0.23440678417682648, 0.63932818174362183, -0.33445680141448975, -0.83114445209503174, 0.3393092155456543, -0.39528405666351318, -0.15350840985774994, 0.48416087031364441, -0.21969817578792572, 0.085933476686477661, -0.043537329882383347, -0.86939173936843872, -0.48907971382141113, 0.34660366177558899, -0.6577904224395752, -0.26560506224632263, -0.20319877564907074, 0.48415187001228333, -0.76040047407150269, -0.93262052536010742, 0.28347820043563843, -0.40431103110313416, -0.28818303346633911, -0.12568081915378571, 0.24627751111984253, 0.20190219581127167, -0.81517708301544189, -0.67601925134658813, -0.87199801206588745, 0.31539759039878845, -0.62883150577545166, 0.03998788446187973, -0.28880965709686279, 0.62690085172653198, -0.53899270296096802, -0.7350810170173645, -0.075547412037849426, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,208 } };
const ALIGN(8) float tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const ALIGN(8) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -0.92889583110809326,0.68841415643692017,0.43113183975219727,0.099463112652301788,0.07517511397600174,-0.031468804925680161,0.013656185008585453,0.05194646492600441,0.26767751574516296,0.10671969503164291,-0.17113754153251648,-0.12698093056678772,0.013735529035329819, 0.37233102321624756,-0.53555929660797119,-0.58108991384506226,-0.27922266721725464,-0.15529264509677887,0.16932369768619537,0.0012591087725013494,-0.038191091269254684,-0.21343341469764709,-0.1397688090801239,-0.029611488804221153,0.094342045485973358,0.1582237184047699, 0.46758729219436646,0.016542477533221245,0.19492858648300171,0.12641777098178864,0.097209379076957703,0.09614979475736618,0.064792267978191376,0.21838182210922241,0.2121623307466507,0.19384035468101501,-0.021421287208795547,-0.020688463002443314,-0.068018876016139984, 
  /* [1][0][][] */ 0.2499472051858902,-0.061430197209119797,0.24448010325431824,0.066126830875873566,-0.64808505773544312,-0.095062077045440674,0.34964197874069214,-0.065135776996612549,-0.2952631413936615,0.07295091450214386,0.16384010016918182,-0.044394411146640778,0.062212806195020676, 0.257773756980896,0.14077210426330566,0.25737935304641724,0.16969610750675201,-0.59704357385635376,-0.029379090294241905,0.11741953343153,-0.046382449567317963,-0.19220137596130371,0.038945697247982025,0.19402512907981873,0.058930251747369766,-0.030699284747242928, 0.24630726873874664,0.1900559663772583,0.18278706073760986,0.20187193155288696,-0.59585827589035034,0.15786002576351166,0.01539325900375843,0.043735969811677933,-0.24461701512336731,0.02216608077287674,0.12354195117950439,-0.045875690877437592,-0.073197565972805023, 
  /* [2][0][][] */ -0.76127099990844727,-0.0256532933562994,0.060199633240699768,0.033711802214384079,-0.37520354986190796,-0.17175807058811188,-0.054158549755811691,-0.13397328555583954,0.13781003654003143,-0.10218466073274612,0.075739622116088867,-0.026634365320205688,0.17925058305263519, 0.19823057949542999,-0.37403461337089539,-0.077620767056941986,0.37368908524513245,0.2599465548992157,0.23424096405506134,0.20679895579814911,-0.04096636176109314,-0.070284657180309296,-0.025289205834269524,0.038899369537830353,-0.17411419749259949,-0.0096553284674882889, 0.82451409101486206,-0.19628143310546875,-0.68519186973571777,-0.26246792078018188,-0.23518660664558411,-0.10020509362220764,0.3130824863910675,-0.022443188354372978,0.24638290703296661,-0.078847549855709076,0.033062148839235306,-0.0058988486416637897,-0.20395298302173615, 
  /* [3][0][][] */ 0.26007074117660522,0.48570522665977478,-0.016741296276450157,0.22532738745212555,0.080592639744281769,-0.033731058239936829,0.099538534879684448,-0.05480073019862175,0.13050299882888794,-0.06219806894659996,-0.072302013635635376,0.1752563863992691,-0.083736792206764221, 0.011389497667551041,0.40190070867538452,0.057940945029258728,0.28327271342277527,0.09955722838640213,-0.12558594346046448,-0.0069695510901510715,-0.24697470664978027,0.094525754451751709,-0.082209974527359009,0.15804924070835114,0.057969983667135239,-0.1552240401506424, -0.29971444606781006,0.26889225840568542,0.14676737785339355,0.34898701310157776,0.33016085624694824,-0.43251323699951172,0.004718300886452198,-0.25195235013961792,-0.064279794692993164,-0.065964058041572571,-0.066624715924263,0.15516132116317749,-0.20343518257141113, 
  /* [4][0][][] */ 0.37802645564079285,0.38564124703407288,0.20054569840431213,-0.069080881774425507,0.053652502596378326,-0.11296714842319489,-0.22867472469806671,-0.030724389478564262,0.19190613925457001,-0.11509084701538086,0.034503087401390076,0.039037514477968216,0.067001901566982269, 0.25083678960800171,0.44578644633293152,0.0768299400806427,-0.15812644362449646,-0.10591301321983337,0.084010757505893707,-0.23810257017612457,-0.044806007295846939,0.039603106677532196,-0.061041459441184998,0.046949137002229691,0.010941398330032825,0.065955422818660736, 0.35628104209899902,0.48609527945518494,0.15220196545124054,-0.19999212026596069,-0.11785273998975754,0.1315939873456955,-0.25481811165809631,-0.0044098272919654846,0.019809441640973091,-0.15489451587200165,-0.15468744933605194,-0.049988690763711929,0.20583067834377289, 
  /* [5][0][][] */ 0.34524250030517578,0.26782426238059998,-0.58980560302734375,-0.10795450955629349,0.20430208742618561,-0.34534111618995667,0.22768330574035645,-0.14519435167312622,-0.073428720235824585,0.10872002691030502,0.019063038751482964,-0.0064938566647469997,-0.18813875317573547, 0.26270836591720581,0.12992730736732483,-0.35524672269821167,-0.065961584448814392,0.15871596336364746,-0.21103975176811218,0.072147861123085022,-0.17699016630649567,-0.048705317080020905,0.068401992321014404,0.090215876698493958,-0.11530858278274536,0.077316507697105408, 0.27261096239089966,0.1666979044675827,-0.39473646879196167,-0.090714871883392334,0.29177770018577576,-0.24696020781993866,0.16262747347354889,-0.16283603012561798,0.019734393805265427,0.031209021806716919,0.092124529182910919,-0.046187270432710648,0.063270613551139832, 
  /* [6][0][][] */ 0.31243464350700378,-0.09378446638584137,-0.23577162623405457,-0.22866527736186981,-0.05431833490729332,0.085183180868625641,0.20040008425712585,-0.20823471248149872,-0.0075622457079589367,-0.082875087857246399,0.061524543911218643,-0.027680028229951859,0.2849399745464325, -0.5295332670211792,0.20387256145477295,0.073025904595851898,0.10083672404289246,-0.06456398218870163,-0.16245557367801666,-0.070384681224822998,0.1362185925245285,0.020985182374715805,0.05597827211022377,-0.16562184691429138,0.028448013588786125,0.11717679351568222, -1.4280309677124023,-0.42549923062324524,-0.17226207256317139,-0.13000541925430298,0.040275413542985916,0.073853902518749237,-0.096907876431941986,-0.14340382814407349,0.028016772121191025,0.016917647793889046,0.083622477948665619,0.011256569996476173,0.06595262885093689, 
  /* [7][0][][] */ -0.36605122685432434,-0.33847078680992126,-0.086140483617782593,-0.019801698625087738,0.23797249794006348,-0.3540642261505127,0.34246456623077393,-0.30010014772415161,0.0090228551998734474,0.15224246680736542,0.05230804905295372,-0.0064098485745489597,-0.035912409424781799, -0.25651746988296509,-0.36531013250350952,-0.086578004062175751,-0.040688350796699524,0.20288436114788055,-0.37843221426010132,0.38792091608047485,-0.47369843721389771,-0.026834538206458092,0.053348526358604431,-0.034098297357559204,0.053721677511930466,-0.077610433101654053, -0.21799415349960327,-0.29978123307228088,0.20619279146194458,-0.047780971974134445,0.17072705924510956,-0.45646989345550537,0.47611570358276367,-0.35989958047866821,0.045974384993314743,-0.039081092923879623,0.012396105565130711,-0.049202177673578262,0.10466785728931427, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(8) float tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const ALIGN(8) float tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 0.07708992063999176,-0.83604466915130615,-0.22777816653251648,-0.17872783541679382,-0.77511823177337646,-0.36431467533111572,0.12293950468301773,-0.18914227187633514, -0.24015484750270844,-0.91855543851852417,-0.24859431385993958,0.015752242878079414,-1.327934741973877,-0.18330053985118866,-0.024327615275979042,-0.3383421003818512, -0.019071480259299278,-0.35651034116744995,-0.077996328473091125,-0.063354872167110443,-1.0661036968231201,-0.39726570248603821,-0.00041310710366815329,-0.28324279189109802, 
  /* [1][0][][] */ 0.12365681678056717,-0.86549282073974609,-0.17490071058273315,0.043222468346357346,-0.018941834568977356,-0.46108716726303101,0.11904097348451614,0.0425596684217453, 0.18534158170223236,-0.29605251550674438,-0.18087705969810486,0.29346957802772522,-0.012409782037138939,-0.21876771748065948,-0.40332746505737305,-0.17994260787963867, 0.18220289051532745,-0.062935464084148407,0.014174612239003181,0.032792970538139343,0.060219895094633102,-0.13120794296264648,-0.69695395231246948,-0.99136584997177124, 
  /* [2][0][][] */ 0.14712174236774445,0.0058972351253032684,-0.038076385855674744,-0.27245962619781494,0.55364876985549927,0.24096328020095825,-0.58825021982192993,-0.077135086059570312, 0.11171600967645645,0.05943046510219574,-0.13683846592903137,-0.26020488142967224,-0.1296771764755249,-0.23407864570617676,-1.1988623142242432,-0.36750206351280212, 0.14941108226776123,-0.054098080843687057,-0.12240251153707504,-0.70743638277053833,0.31262800097465515,0.38690522313117981,-0.31010317802429199,-0.31997045874595642, 
  /* [3][0][][] */ 0.32318335771560669,-0.12229031324386597,0.17256958782672882,-0.099119819700717926,-0.15351670980453491,0.034036505967378616,-0.31352460384368896,-0.28830710053443909, 0.1032642275094986,-0.102476567029953,-0.206805020570755,0.011132241226732731,-0.017346395179629326,-0.15365159511566162,0.31360363960266113,-0.19950935244560242, 0.11059311032295227,-0.19427984952926636,0.27341076731681824,-0.014984590001404285,-0.12646609544754028,-0.17326146364212036,0.27405735850334167,-0.10314396023750305, 
  /* [4][0][][] */ -0.2126232236623764,-0.015885805711150169,-0.17697407305240631,-0.16101071238517761,0.34820625185966492,-0.14264726638793945,-0.086795181035995483,0.051904879510402679, -0.28912791609764099,0.085612006485462189,-0.28576365113258362,-0.12477334588766098,-0.33097371459007263,-0.23525369167327881,-0.11659464240074158,0.67652976512908936, -0.11382094770669937,-0.09902055561542511,-0.15475952625274658,0.12155382335186005,0.46924024820327759,-0.12839516997337341,-0.18450085818767548,-0.1272224485874176, 
  /* [5][0][][] */ -0.080706022679805756,0.092576995491981506,-0.034826330840587616,0.24477945268154144,0.22172103822231293,0.16058893501758575,-0.78551238775253296,-0.18601435422897339, -0.12657184898853302,-0.13865530490875244,-0.4759199321269989,0.10577508807182312,-0.14084307849407196,0.13579225540161133,-0.92012941837310791,-0.12519070506095886, -0.18186315894126892,0.4181562066078186,-0.21205751597881317,0.10142721235752106,0.43292242288589478,0.15945561230182648,-0.16848692297935486,-0.09857381135225296, 
  /* [6][0][][] */ -0.10744759440422058,0.56993037462234497,-0.10579854249954224,-0.20274516940116882,-0.10563493520021439,0.13076400756835938,-0.33602669835090637,0.2197161465883255, -0.31004804372787476,-0.026254046708345413,-0.0014913916820660233,0.08210260421037674,0.085809722542762756,0.20574179291725159,-0.59341728687286377,-0.024417538195848465, 0.057735871523618698,0.49066224694252014,0.084045425057411194,0.12720330059528351,-0.060141239315271378,0.088301710784435272,-0.37171754240989685,-0.20115448534488678, 
  /* [7][0][][] */ -0.35196295380592346,0.096048735082149506,-0.0034807873889803886,0.15167701244354248,-0.0038124248385429382,0.434650719165802,0.14272606372833252,-0.1556134819984436, -0.45772022008895874,-0.02563309483230114,-0.12252482771873474,0.29152879118919373,0.050315722823143005,0.027632210403680801,0.047428473830223083,-0.051438223570585251, -0.12523461878299713,0.080391250550746918,-0.12665407359600067,0.052712477743625641,0.021647032350301743,0.68685191869735718,-0.018216442316770554,-0.19859199225902557, 
  /* [8][0][][] */ -0.20762836933135986,-0.39558246731758118,-0.24063357710838318,0.27782636880874634,-1.1283018589019775,-0.6958925724029541,-0.054217752069234848,0.17287600040435791, -0.42062446475028992,-0.51851534843444824,-0.39769047498703003,0.04385659471154213,-1.3999676704406738,-1.0023640394210815,-0.022254766896367073,-0.044564332813024521, -0.62275797128677368,-0.36183056235313416,-0.3922482430934906,0.068089857697486877,-1.5215587615966797,-0.87700396776199341,-0.0035752519033849239,0.16005872189998627, 
  /* [9][0][][] */ 0.11444962024688721,0.082411013543605804,0.14689476788043976,-0.16706624627113342,-0.32946628332138062,0.33451351523399353,-0.40586322546005249,-0.11621987074613571, -0.050095327198505402,0.66053760051727295,-0.18015432357788086,-0.081340707838535309,-0.48604029417037964,-0.15874789655208588,0.006976468488574028,-0.66888517141342163, -0.07081449031829834,-0.29891321063041687,-0.30455327033996582,-0.083000496029853821,-0.44839173555374146,-0.78782939910888672,0.010975098237395287,-0.45159053802490234, 
  /* [10][0][][] */ 0.27516481280326843,-0.13542945683002472,0.44447490572929382,-0.075647786259651184,-0.25972530245780945,0.045417696237564087,-0.17685690522193909,-0.39297965168952942, 0.38104087114334106,-0.021309364587068558,-0.085506036877632141,-0.14140848815441132,-0.28321737051010132,0.020027311518788338,-0.28798636794090271,-0.61080968379974365, 0.087657973170280457,-0.3246915340423584,-0.54905390739440918,0.11590766161680222,-0.36246323585510254,-0.0068050473928451538,0.35950374603271484,-0.21197675168514252, 
  /* [11][0][][] */ -0.40917548537254333,-1.4339853525161743,-0.017096277326345444,-1.0623128414154053,-0.74024152755737305,-0.71589863300323486,0.16175016760826111,-0.078300148248672485, -0.14649103581905365,-0.69082337617874146,0.032711688429117203,-0.89446532726287842,-0.16849817335605621,-0.45882374048233032,0.13775815069675446,0.39750885963439941, -0.17472916841506958,0.41638201475143433,0.12274188548326492,-0.54881274700164795,0.15920652449131012,-0.72568386793136597,0.14186383783817291,-0.056627962738275528, 
  /* [12][0][][] */ 0.19056048989295959,-0.56262123584747314,-0.31901231408119202,-0.087259933352470398,-0.041831575334072113,-0.4550798237323761,-0.49232396483421326,0.048219621181488037, 0.04417131096124649,-0.80922752618789673,-0.20280721783638,-0.10598530620336533,0.21424317359924316,-0.38859379291534424,-0.62898987531661987,-0.89499926567077637, 0.063827924430370331,-0.88935297727584839,-0.4864119291305542,-0.57296830415725708,0.23990948498249054,-0.49006494879722595,-0.27110034227371216,-0.57259958982467651, 
  /* [13][0][][] */ 0.040916342288255692,-0.16560113430023193,-0.8963167667388916,0.39931491017341614,0.07572484016418457,-0.2588895857334137,-0.68447285890579224,-0.89574337005615234, -0.22544652223587036,-0.13522221148014069,-1.2620416879653931,-0.12603971362113953,-0.027722302824258804,-0.18893875181674957,-0.2939426600933075,-1.4946680068969727, -0.29121330380439758,-0.25189921259880066,-0.56707656383514404,0.41523861885070801,-0.098617523908615112,-0.47711741924285889,-0.041245125234127045,-0.16254071891307831, 
  /* [14][0][][] */ -0.071271516382694244,0.38955205678939819,0.35131353139877319,-0.045987632125616074,-0.12106624990701675,0.46491619944572449,-0.8401680588722229,-0.2399115264415741, -0.18450130522251129,-0.040332648903131485,0.25120177865028381,-0.055494185537099838,-0.18523883819580078,-0.31897756457328796,-0.98971199989318848,-0.3748466968536377, -0.077464230358600616,0.076292537152767181,0.14250537753105164,-0.0126807801425457,-0.079487383365631104,0.47233730554580688,-0.64373213052749634,-0.30041038990020752, 
  /* [15][0][][] */ 0.49042919278144836,-0.31310468912124634,-0.25530019402503967,0.26715067028999329,-0.35420379042625427,-0.33211386203765869,0.091046437621116638,-0.13431805372238159, 0.45895537734031677,-0.1021411344408989,0.29267504811286926,-0.19461248815059662,-0.0067636305466294289,0.09160982072353363,-0.11073645949363708,-0.24521200358867645, 0.33024907112121582,-0.18369953334331512,0.16427820920944214,-0.1687571257352829,-0.095655679702758789,0.2850896418094635,0.021765436977148056,-0.16325560212135315, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 50, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 25, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,13 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,8 } };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,50,8 } };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,50,8 } };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,50,1,8 } };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,25,1,8 } };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,25,8 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,25,16 } };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,25,16 } };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,25,16 } };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,25,1,16 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,13,1,16 } };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,208 } };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,5 } };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,5 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 2608, (TfLiteIntArray*)&tensor_dimension0, 2600, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 20, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4160, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1248, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 2600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 2608, (TfLiteIntArray*)&tensor_dimension17, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension19, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension21, 800, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 800, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension23, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension25, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension27, 832, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 832, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension29, 20, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 20, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
