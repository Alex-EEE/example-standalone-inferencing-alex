/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 13.01.2021 12:06:18

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 1472;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,108 } };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 80, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) float tensor_data2[8] = { -2.0454642772674561, -1.1419028043746948, -0.30783817172050476, -2.0975956916809082, -1.6509207487106323, -1.1434192657470703, -0.38396638631820679, -2.1618998050689697, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const ALIGN(8) float tensor_data3[16] = { -0.17204301059246063, 0.55786633491516113, 0.026295356452465057, -0.76707345247268677, -0.14806607365608215, -0.50380480289459229, -0.48098981380462646, 0.29448151588439941, 0.12973916530609131, -0.20770329236984253, -0.22991283237934113, -0.97224289178848267, -0.34726172685623169, -0.26866325736045837, -0.38742315769195557, -0.25601130723953247, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const ALIGN(8) float tensor_data4[4] = { -0.34741151332855225, 0.49429559707641602, 0.53122657537460327, -0.69335275888442993, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) float tensor_data5[4*80] = { 
  0.46912956237792969, 0.32436302304267883, -0.089137531816959381, 0.53807204961776733, -0.78604316711425781, 0.052293270826339722, -0.030994132161140442, 0.046212386339902878, 0.27695062756538391, 0.097343474626541138, -0.089267201721668243, -0.29230490326881409, -0.23936150968074799, 0.11249208450317383, -0.22479526698589325, 0.26670822501182556, 0.49654498696327209, 0.4136161208152771, 0.41765382885932922, 0.44104108214378357, -0.35608676075935364, 0.30169042944908142, 0.15478160977363586, -0.12004265189170837, -0.29699912667274475, 0.012388581410050392, 0.088486634194850922, -0.15363851189613342, -0.037987452000379562, 0.20785415172576904, -0.42780250310897827, 0.40334469079971313, 0.42084047198295593, 0.10608313232660294, 0.38025310635566711, 0.58394092321395874, -0.2977159321308136, 0.0071462634950876236, 0.26282835006713867, -0.43628445267677307, -0.66257870197296143, -0.099323064088821411, -0.13476096093654633, -0.015139847993850708, -0.31350865960121155, -0.11147863417863846, -0.25774860382080078, 0.33711087703704834, 0.48180916905403137, 0.56509459018707275, 0.36951640248298645, 0.40271571278572083, -0.16331993043422699, 0.10082923620939255, 0.093400008976459503, -0.40175566077232361, -0.7882961630821228, -0.31064149737358093, -0.14488469064235687, -0.050580237060785294, -0.44117569923400879, 0.10806460678577423, -0.4733186662197113, 0.43535178899765015, 0.29666262865066528, 0.34404537081718445, 0.56374377012252808, 0.55294227600097656, -0.13495822250843048, 0.20644542574882507, 0.29192423820495605, -0.31189700961112976, -0.65489178895950317, 0.094156704843044281, 0.063465557992458344, -0.11166082322597504, -0.53914225101470947, 0.36817184090614319, -0.13401107490062714, 0.073626391589641571, 
  -1.2406601905822754, -1.0613844394683838, 0.65291213989257812, 0.64602619409561157, -0.101923868060112, -0.59043967723846436, -0.076749235391616821, 0.28514587879180908, 0.19728995859622955, 0.24088910222053528, 0.050036385655403137, 0.051329948008060455, -0.059346139430999756, 0.11280117183923721, 0.14734025299549103, 0.17773175239562988, -0.85344839096069336, -0.95068573951721191, -0.21457609534263611, -0.046891793608665466, -0.048591881990432739, -0.56055229902267456, -0.63636642694473267, -0.4312853217124939, 0.35778868198394775, 0.37655216455459595, -0.0079759526997804642, 0.44146934151649475, 0.23937109112739563, 0.17751675844192505, 0.10942906141281128, -0.17204025387763977, -0.55580002069473267, -0.86746251583099365, -0.87161558866500854, -0.01506434939801693, -0.17151616513729095, -1.1385090351104736, -0.72235268354415894, -0.35561457276344299, 0.10553760826587677, 0.35193601250648499, -0.056412652134895325, 0.15140482783317566, 0.13009969890117645, 0.21944703161716461, 0.21079130470752716, -0.38845524191856384, -0.5282856822013855, -0.48832178115844727, 0.19152525067329407, 0.34376817941665649, -0.0086224554106593132, -0.79459702968597412, -0.30610024929046631, -0.054315920919179916, 0.085423357784748077, 0.49644356966018677, -0.087183214724063873, 0.18229620158672333, 0.41648370027542114, 0.26465591788291931, 0.22208292782306671, -0.24454276263713837, -0.32080668210983276, -0.18838401138782501, -0.38652163743972778, -0.30748817324638367, -0.20035810768604279, -0.56262338161468506, 0.11402945965528488, -0.62314987182617188, 0.28097981214523315, 0.13587512075901031, 0.28346863389015198, 0.17586594820022583, 0.34093835949897766, 0.59396177530288696, -0.017796868458390236, -0.10806325823068619, 
  -0.52727711200714111, -0.10423518717288971, -0.41774055361747742, -0.21779027581214905, 0.25284653902053833, 0.031730644404888153, 0.10823192447423935, -0.15785786509513855, -0.30094903707504272, 0.046915337443351746, 0.21971592307090759, -0.41902458667755127, -0.22585974633693695, -0.085436388850212097, 0.24619521200656891, -0.072500988841056824, -0.27984285354614258, -0.35261619091033936, -0.10648572444915771, -0.42984277009963989, -0.019340813159942627, 0.26767167448997498, 0.15390612185001373, 0.0062823966145515442, -0.31084507703781128, 0.12921951711177826, 0.33143284916877747, -0.41686001420021057, -0.34903118014335632, -0.17228071391582489, 0.06205880269408226, 0.12834157049655914, -0.30226022005081177, -0.30046862363815308, 0.14841726422309875, -0.12984289228916168, -0.1231134906411171, 0.16402256488800049, 0.38420245051383972, -0.37260586023330688, -0.21183627843856812, 0.099547132849693298, 0.24433855712413788, -0.22424495220184326, -0.51224988698959351, -0.22767819464206696, 0.18183140456676483, 0.27081522345542908, -0.012987301684916019, -0.086130514740943909, -0.0084104333072900772, -0.36146602034568787, 0.16761210560798645, 0.20619072020053864, 0.096327006816864014, -0.19080154597759247, -0.096532568335533142, 0.11326104402542114, 0.1077602207660675, -0.50759309530258179, -0.0550343357026577, -0.086718767881393433, 0.1002064123749733, 0.32034888863563538, -0.15154050290584564, 0.17875564098358154, 0.073112130165100098, -0.22944408655166626, 0.38157489895820618, 0.24168089032173157, 0.24031999707221985, -0.074466429650783539, -0.39588832855224609, 0.19416700303554535, 0.16075955331325531, -0.23099227249622345, 0.0099267354235053062, -0.36237722635269165, 0.075410209596157074, 0.057249605655670166, 
  0.33832931518554688, 0.24593371152877808, -0.079323433339595795, -1.1005692481994629, 0.46361583471298218, 0.2573712170124054, -0.092897728085517883, -0.93864697217941284, -0.34507814049720764, -0.074889831244945526, -0.41795960068702698, 0.26004686951637268, -0.07947029173374176, 0.036379996687173843, -0.1213432177901268, -0.054877687245607376, 0.3481745719909668, 0.29797947406768799, -0.64840775728225708, -0.032775010913610458, 0.29177370667457581, 0.32115304470062256, -0.51815968751907349, 0.76237320899963379, 0.43502926826477051, -0.21310694515705109, -0.71545475721359253, 0.29462116956710815, 0.0018642215291038156, 0.091998614370822906, -0.20054523646831512, -0.53588962554931641, 0.21137323975563049, 0.19060662388801575, -0.62480908632278442, -0.12730343639850616, 0.15392261743545532, 0.25401666760444641, -0.72640496492385864, 0.73153537511825562, 0.52457427978515625, -0.24807257950305939, -0.43709620833396912, 0.32507503032684326, -0.039044152945280075, -0.25281104445457458, -0.1791825145483017, -0.59897816181182861, 0.24093666672706604, 0.33485734462738037, -1.0069901943206787, 0.12717230618000031, 0.30071231722831726, 0.27655959129333496, -0.494384765625, 0.7111055850982666, 0.46314674615859985, -0.53630834817886353, -0.54953867197036743, 0.43416744470596313, 0.19188006222248077, -0.12191737443208694, -0.24871203303337097, -0.9190514087677002, 0.1405612975358963, -0.34467929601669312, -0.72231441736221313, -0.030151568353176117, 0.27703818678855896, 0.29838395118713379, -0.69497710466384888, 0.70718055963516235, 0.46112218499183655, 0.060407008975744247, -0.58421039581298828, 0.073444359004497528, 0.41887682676315308, -0.60256677865982056, 0.079909764230251312, -0.19077408313751221, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,80 } };
const ALIGN(8) float tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const ALIGN(8) float tensor_data7[8*1*3*6] = { 
  /* [0][0][][] */ 0.51926594972610474,0.18302859365940094,-0.35927575826644897,-0.27312988042831421,0.24084322154521942,-0.077299579977989197, 0.13240216672420502,0.30986770987510681,-0.11457185447216034,-0.44401076436042786,0.055533051490783691,0.042041216045618057, 0.16937887668609619,0.59951120615005493,0.12289097160100937,-0.46445542573928833,-0.048509251326322556,0.16899664700031281, 
  /* [1][0][][] */ -0.84099918603897095,-0.082213245332241058,0.040778234601020813,-0.21914489567279816,0.079009972512722015,0.059467136859893799, -0.44779828190803528,0.17448738217353821,-0.25429794192314148,-0.31294324994087219,-0.08936658501625061,0.042222999036312103, 1.1341291666030884,-0.34399610757827759,-0.20169393718242645,-0.20846004784107208,0.20882441103458405,0.11891244351863861, 
  /* [2][0][][] */ 0.051414582878351212,-0.15967318415641785,0.19359198212623596,0.20233674347400665,0.057388752698898315,0.0069385948590934277, -1.2824418544769287,0.81539160013198853,-0.14494709670543671,0.0097062699496746063,0.086577676236629486,0.052948575466871262, -0.21519419550895691,0.2217622846364975,-0.24114614725112915,-0.24465753138065338,0.12718158960342407,0.0092933382838964462, 
  /* [3][0][][] */ -0.26985287666320801,0.044707935303449631,0.076507911086082458,0.028034085407853127,-0.007196404505521059,0.019027490168809891, 0.034785740077495575,0.25241401791572571,0.69390660524368286,0.085129156708717346,0.23853899538516998,-0.0083176018670201302, 0.38670811057090759,0.29943442344665527,0.7020905613899231,0.14312224090099335,-0.32575711607933044,0.20260906219482422, 
  /* [4][0][][] */ 0.24625341594219208,0.36584663391113281,-0.41624918580055237,-0.19757868349552155,0.53153228759765625,-0.16135507822036743, 0.389781653881073,0.05886460468173027,-0.54082077741622925,0.033031787723302841,0.039158061146736145,-0.16247215867042542, 0.49694383144378662,0.20308685302734375,-0.1727827787399292,0.32892680168151855,-0.27636760473251343,0.017766064032912254, 
  /* [5][0][][] */ 0.53694206476211548,0.2683066725730896,0.1087082102894783,0.32351753115653992,-0.0084284916520118713,0.096025735139846802, 0.46387812495231628,-0.35793158411979675,0.055944308638572693,0.065721653401851654,0.099398486316204071,-0.18144981563091278, 0.49418798089027405,-0.35098180174827576,-0.10759146511554718,-0.17849056422710419,0.26461264491081238,-0.21104465425014496, 
  /* [6][0][][] */ -0.34316596388816833,-0.079393982887268066,0.096436962485313416,0.039554569870233536,0.086549185216426849,-0.019248908385634422, 1.5585358142852783,0.073810778558254242,-0.087434299290180206,0.053715083748102188,0.02875896729528904,-0.029740557074546814, -1.2933379411697388,-0.11906220763921738,0.13182975351810455,-0.063573122024536133,-0.083397939801216125,0.036090046167373657, 
  /* [7][0][][] */ 0.23375336825847626,0.086169421672821045,0.51487272977828979,-0.14915706217288971,-0.20463921129703522,-0.14475992321968079, 0.23429952561855316,0.019713744521141052,0.23248599469661713,-0.15806116163730621,-0.5264890193939209,0.017731808125972748, 0.14794853329658508,0.4467906653881073,-0.3420073390007019,0.2059234082698822,-0.44244813919067383,0.08512859046459198, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,6 } };
const ALIGN(8) float tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const ALIGN(8) float tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -1.5116034746170044,-0.27755597233772278,-0.20125417411327362,0.73752140998840332,-0.91442364454269409,0.32916685938835144,-0.9949033260345459,0.20534615218639374, 0.14366878569126129,-0.27881419658660889,-2.2930772304534912,-0.28335258364677429,-0.097190417349338531,-0.013555273413658142,-0.36924570798873901,-0.33938392996788025, 0.33370280265808105,-1.0835986137390137,-1.0514740943908691,-0.80012506246566772,0.039542399346828461,0.14155012369155884,-0.11736459285020828,-0.11216640472412109, 
  /* [1][0][][] */ -2.0167179107666016,-0.4402899444103241,-0.077285505831241608,0.10761363059282303,-1.7078328132629395,-2.1826820373535156,-0.49850565195083618,0.074249327182769775, -0.75909805297851562,-0.60065436363220215,-0.13365675508975983,0.36325421929359436,-0.23626691102981567,0.0059086503461003304,-1.3025950193405151,-0.018130598589777946, 0.086496390402317047,-0.54926544427871704,-0.2218908816576004,-0.75591963529586792,0.04491255059838295,0.14536629617214203,-0.50392580032348633,0.37133562564849854, 
  /* [2][0][][] */ -0.70885878801345825,-0.53893864154815674,-1.340355396270752,-0.0068533774465322495,0.18179577589035034,0.23280254006385803,-1.0802162885665894,0.014892216771841049, 0.61441224813461304,-0.4396931529045105,-0.16450896859169006,-0.32076922059059143,0.050595726817846298,-0.10132211446762085,-0.28802937269210815,-0.11684872210025787, 0.15996360778808594,-0.77281880378723145,-0.040670696645975113,-2.1440534591674805,0.021526144817471504,-1.9332480430603027,-0.55013060569763184,-0.020470449700951576, 
  /* [3][0][][] */ -2.5775167942047119,-0.26744365692138672,-0.21987943351268768,0.13130244612693787,-0.7450137734413147,-0.53184080123901367,-0.60072827339172363,-0.14434139430522919, 0.22001637518405914,-0.20011231303215027,-1.0383287668228149,0.0083758514374494553,0.019021958112716675,0.86986130475997925,-0.17997841536998749,0.060505717992782593, -0.0072738439776003361,-0.52681052684783936,-1.0531318187713623,-2.3368725776672363,0.039531327784061432,0.15680302679538727,-0.33706694841384888,-0.16057348251342773, 
  /* [4][0][][] */ -0.55490338802337646,-0.20123010873794556,0.24387326836585999,-0.26557576656341553,-1.8361811637878418,-0.45461907982826233,-0.71732538938522339,-1.6923645734786987, 0.38956668972969055,-0.15396063029766083,0.10067001730203629,-0.1824517697095871,-0.91551482677459717,-0.51087355613708496,-1.0408041477203369,0.79253900051116943, 0.34976553916931152,0.33220511674880981,0.18256886303424835,0.085404366254806519,-0.16722296178340912,-0.34856081008911133,-0.8667711615562439,0.052624288946390152, 
  /* [5][0][][] */ -0.032560672610998154,0.083803370594978333,0.11099978536367416,0.290424644947052,0.45313754677772522,-0.0029610679484903812,-0.4019990861415863,0.95313215255737305, 0.095710240304470062,0.05472990870475769,-0.054503284394741058,0.32557389140129089,0.16286687552928925,-0.05858929455280304,-0.42543885111808777,0.13439273834228516, 0.15697051584720612,-0.1794365793466568,-0.18777316808700562,0.62255734205245972,0.15545135736465454,0.062553845345973969,-0.10479307174682617,0.80958479642868042, 
  /* [6][0][][] */ 0.51393091678619385,-0.33597072958946228,-0.047197002917528152,-0.24519270658493042,-0.30823192000389099,0.21414373815059662,-1.0096520185470581,-0.0052839042618870735, 0.43810185790061951,-0.084619969129562378,-0.019414674490690231,-0.25843137502670288,-0.076007477939128876,0.034565504640340805,-0.93189895153045654,-0.22712957859039307, 0.21934974193572998,-0.1589721292257309,0.0035679901484400034,0.02316645160317421,0.80538308620452881,-0.25042915344238281,-0.22893126308917999,-0.026072345674037933, 
  /* [7][0][][] */ -0.0084360986948013306,-0.29104563593864441,-1.5526649951934814,-0.39176243543624878,0.088536828756332397,-0.021018320694565773,-0.090828776359558105,0.39564859867095947, -0.14118975400924683,-0.26020514965057373,-0.86769556999206543,-2.561286449432373,-0.21036480367183685,0.1685260683298111,-0.098470374941825867,-1.0951559543609619, -0.44556546211242676,-0.86973249912261963,-3.3806695938110352,-1.867918848991394,-1.2814902067184448,0.43104380369186401,-0.023375241085886955,-2.2497458457946777, 
  /* [8][0][][] */ -0.068367995321750641,0.14831554889678955,-0.68856006860733032,-1.0168564319610596,0.11326973140239716,0.052299968898296356,-0.0004420324694365263,0.12735731899738312, -1.0478724241256714,-0.043965179473161697,-0.89740234613418579,-1.0143032073974609,-0.78013956546783447,0.46882551908493042,0.057999119162559509,-1.43266761302948, -1.5635451078414917,-0.36702924966812134,-0.10524684190750122,-1.0691934823989868,-1.8253827095031738,0.1114419549703598,0.072238482534885406,-1.9966143369674683, 
  /* [9][0][][] */ -0.017253449186682701,-0.4385208785533905,0.15956956148147583,-0.16633044183254242,-0.026552358642220497,-0.2877298891544342,0.36173927783966064,-0.34603878855705261, -0.34261056780815125,0.34499159455299377,-0.18659509718418121,-0.56703871488571167,0.44498491287231445,-0.051288548856973648,0.44780087471008301,-0.055815823376178741, -0.056981462985277176,-0.47824311256408691,-0.10988721996545792,-0.65534836053848267,-0.076780691742897034,0.092396505177021027,0.14958822727203369,-0.47047886252403259, 
  /* [10][0][][] */ 0.0761299729347229,0.19793802499771118,0.042488850653171539,-0.69959473609924316,-0.036953415721654892,-0.29014909267425537,-0.71513819694519043,-0.46071451902389526, 0.22189076244831085,0.32011297345161438,-0.087614491581916809,-1.4463621377944946,-0.19908139109611511,-0.088774234056472778,-0.36605879664421082,-1.2823027372360229, -0.11798549443483353,0.45392262935638428,-0.18170872330665588,-0.18678387999534607,0.64985358715057373,0.060235731303691864,-0.14011265337467194,-0.48040106892585754, 
  /* [11][0][][] */ -0.012749198824167252,-0.19592365622520447,0.62734615802764893,0.61685669422149658,-0.7428169846534729,-0.27668860554695129,-0.75063121318817139,-1.47566819190979, 0.0098457643762230873,-0.41432821750640869,-0.2483271062374115,0.14702087640762329,-0.69507688283920288,-0.40583920478820801,0.22427564859390259,0.34495458006858826, -0.0032029140274971724,-0.063947767019271851,-0.1178814023733139,0.1699325293302536,-0.58393895626068115,-0.38558292388916016,0.13266877830028534,0.1259959489107132, 
  /* [12][0][][] */ -1.1672439575195312,0.41469770669937134,-0.029530823230743408,-0.17876090109348297,-0.4817340075969696,0.64781069755554199,0.17350021004676819,-1.1850277185440063, -0.64132165908813477,-0.2689782977104187,0.32828059792518616,-0.064915113151073456,-0.32740530371665955,-0.16971717774868011,0.12966780364513397,-0.99212116003036499, -1.1365396976470947,-0.017187831923365593,-0.055718500167131424,-0.09002356231212616,-0.42357847094535828,-0.94825929403305054,0.12742237746715546,-1.2187206745147705, 
  /* [13][0][][] */ -0.13605999946594238,0.50512236356735229,0.007558431476354599,0.08592609316110611,-0.13080590963363647,-0.51939982175827026,0.2714821994304657,-0.51810932159423828, -0.39941903948783875,-0.42507055401802063,-0.089758634567260742,-0.59127497673034668,-0.054852861911058426,-0.034786820411682129,0.22190435230731964,-0.40913337469100952, -1.1422460079193115,0.15221284329891205,0.14103326201438904,-0.38297632336616516,-0.18030118942260742,-0.083540469408035278,0.55774438381195068,-1.14211106300354, 
  /* [14][0][][] */ 0.18402905762195587,0.22623372077941895,0.4151284396648407,-1.1659318208694458,-0.0018320862436667085,-0.12769700586795807,-0.24151131510734558,-0.084494113922119141, -0.047925874590873718,-0.17700912058353424,-0.21231840550899506,-0.8393477201461792,0.35569792985916138,-0.024167569354176521,-0.10411927849054337,-0.57635480165481567, -0.28351184725761414,0.59804803133010864,-0.030621878802776337,-0.29744279384613037,0.18834620714187622,-0.12430515885353088,0.022306650876998901,-0.21879304945468903, 
  /* [15][0][][] */ 0.67108339071273804,-0.52653056383132935,-0.35897883772850037,0.0017416686750948429,-0.35910370945930481,0.27781400084495544,-0.36817193031311035,-0.094518460333347321, -0.32557645440101624,-0.73865598440170288,-0.060175973922014236,-0.1293882429599762,0.59423267841339111,0.062475245445966721,-0.24273261427879333,-0.045338135212659836, 0.798972487449646,-0.74769121408462524,-0.020702308043837547,-0.28215822577476501,-0.24370953440666199,-0.69977116584777832,-0.33592429757118225,-0.145018070936203, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 18, 6, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 18, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 18, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 9, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 9, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 9, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,18,6 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,18,8 } };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,18,8 } };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,18,8 } };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,18,1,8 } };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,9,1,8 } };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,9,8 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,9,16 } };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,9,16 } };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,9,16 } };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,9,1,16 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,5,1,16 } };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,80 } };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,4 } };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,4 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension0, 432, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1280, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 576, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 432, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 576, (TfLiteIntArray*)&tensor_dimension17, 576, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 576, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 576, (TfLiteIntArray*)&tensor_dimension19, 576, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 576, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 576, (TfLiteIntArray*)&tensor_dimension21, 288, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 288, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 576, (TfLiteIntArray*)&tensor_dimension23, 576, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 576, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 576, (TfLiteIntArray*)&tensor_dimension25, 576, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 576, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 576, (TfLiteIntArray*)&tensor_dimension27, 320, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 320, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension29, 16, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 16, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
